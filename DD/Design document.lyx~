#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass extarticle
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Software Engineering 2: PowerEnjoy Design Document
\end_layout

\begin_layout Author
Andrea Pace, Lorenzo Petrangeli, Tommaso Paulon
\end_layout

\begin_layout Standard
\align center
Version 1.0
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Subsection
Purpose
\end_layout

\begin_layout Standard
The purpose of this document is to show:
\end_layout

\begin_layout Itemize
the high level architecture
\end_layout

\begin_layout Itemize
the main design patterns
\end_layout

\begin_layout Itemize
the main components,
\end_layout

\begin_layout Itemize
their interfaces and the way they are connected
\end_layout

\begin_layout Subsection
Scope
\end_layout

\begin_layout Standard
\noindent
This project has two targets of people: the user and the operator
\end_layout

\begin_layout Standard
\noindent
The user will be able to sign up and make reservations, while the system
 will check if the data provided by the users are correct and will compute
 the cost of the ride.
 
\end_layout

\begin_layout Standard
\noindent
The operator will receive notifications about problems with cars
\end_layout

\begin_layout Subsection
Definitions, acronyms, abbreviations
\end_layout

\begin_layout Subsection
Reference documents
\end_layout

\begin_layout Itemize
Rasd
\end_layout

\begin_layout Itemize
Assignments AA 2016-2017
\end_layout

\begin_layout Section
Architectural design
\end_layout

\begin_layout Subsection
Overview
\end_layout

\begin_layout Standard
The system has a three tier architecture, we have:
\end_layout

\begin_layout Itemize
The client and the operator devices, plus the web server
\end_layout

\begin_layout Itemize
an application server which handles the business logic
\end_layout

\begin_layout Itemize
a database server
\end_layout

\begin_layout Subsection
High level components and their interaction
\end_layout

\begin_layout Standard
\noindent
The central server handles the communication between the different components.
\end_layout

\begin_layout Standard
\noindent
The client can send requests from the app or from the web server and receives
 notifications.
 The requests that can be sent from the web server are a subset of the requests
 available via app.
\end_layout

\begin_layout Standard
\noindent
The car handler sends notifications about his status(battery level, current
 charge, position) and receives request for internal state change from the
 server (reservation and unlocking).
\end_layout

\begin_layout Standard
\noindent
The power stations only send informations about the number of free plugs.
 
\end_layout

\begin_layout Standard
\noindent
The payment handler receives payment data and returns a positive answer
 if the payment is accepted through an external interface.
\end_layout

\begin_layout Standard
\noindent
The map provider simply receives positions and returns a map through an
 external interface to the client apps and to the browser
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename Immagini/Components/Component diagram.png
	scale 80

\end_inset


\end_layout

\begin_layout Subsection
Component view
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename Immagini/Components/components.png
	scale 70

\end_inset


\end_layout

\begin_layout Itemize
User controller: handles login, registration and in general all the client
 and the operator data 
\end_layout

\begin_layout Itemize
Reservation controller: handles the reservation, the unlock requests and
 submits the final charge to the payment controller.
 It interacts with the car controller in order to receive data concerning
 position, number of passengers and every information needed to compute
 the final charge
\end_layout

\begin_layout Itemize
Car controller: manages all the data from the car sensors.
 It is also in charge of notifying the operator for all the problems stated
 in the RASD
\end_layout

\begin_layout Itemize
Payment controller: manages the real communication with the payment handler.
 It also interacts with the User controller when the client decides to pay
 off his debts
\end_layout

\begin_layout Standard
\noindent
The power stations communicate directly with the model, since the only informati
on they share is the number of free plugs.
\end_layout

\begin_layout Standard
\noindent
Every component interacts with the model, which is the only link to the
 DBMS.
 
\end_layout

\begin_layout Subsection
Deploying view
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename /home/andrea/workspace/SoftEng2/DD/Immagini/Components/Deployment diagram.png
	scale 30

\end_inset


\end_layout

\begin_layout Subsection
Runtime view
\end_layout

\begin_layout Standard
The following sequence diagrams show the interactions between components
 from the reservation of a car to the end of the ride.
 The interaction with the external payment handler is shown in a separate
 diagram since it's always the same process.
 Every interation with the database is actually handled by the Model component,
 but we always skip this component in the diagrams.
\end_layout

\begin_layout Subsubsection
Registration
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename Immagini/Sequence diagrams/Svg/signUpSequence.svg
	scale 60
	rotateAngle 90

\end_inset


\end_layout

\begin_layout Standard
This diagram shows the operations performed when a user signs up.
 The system checks that every information provided is consistent and not
 already present in the database.
 If every information is correct, the system generates a password which
 is sent to the user and stores the data.
\end_layout

\begin_layout Subsubsection
Login
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename Immagini/Sequence diagrams/Svg/login.svg
	scale 70

\end_inset


\end_layout

\begin_layout Standard
This diagram shows the login process.
 When a client enters the correct username and password, he subscribes to
 a topic related to available cars.
 In this way every time a car is reserved or released the reservation controller
 sends the current set of available cars to every client.
 This process is shown in the next diagrams.
\end_layout

\begin_layout Subsubsection
Reservation
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename /home/andrea/workspace/SoftEng2/DD/Immagini/Sequence diagrams/Svg/reservation.svg
	scale 50
	rotateAngle 90

\end_inset


\end_layout

\begin_layout Standard
\noindent
This diagram represents the reservation process.
 Every call is synchronous since no process can proceed without the previous
 operations.
\end_layout

\begin_layout Standard
\noindent
This particolar view shows a situation where all the conditions to make
 a reservation are met.
 If any control fails the process simply stops.
 If the reservation is confirmed, the reservation controller broadcasts
 this information, so the user app is always up to date
\end_layout

\begin_layout Subsubsection
Car unlocking
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename /home/andrea/workspace/SoftEng2/DD/Immagini/Sequence diagrams/Svg/unlockSequence.svg
	scale 60
	rotateAngle 90

\end_inset


\end_layout

\begin_layout Standard
\noindent
This diagram shows several situations.
 If the timeout expires before the unlock request the car becomes available
 again, and the client pays a fee and the availability of the car is broadcasted
 to all the clients
\end_layout

\begin_layout Standard
\noindent
If the unlock request arrives before the countdown expires, the system checks
 if the client's position is close enough.
 In this view we show the system behaviour when this condition is met.
 A reservation cancel can occur in this part of the process.
 In this case the system checks if there is a real reservation and if this
 occurs the reservation is canceled.
 According to the requirements we should check if the engine is already
 ignited, but we simply don't accept a reservation cancel after that moment.
 As usual the availability of the car is broadcasted.
\end_layout

\begin_layout Subsubsection
End of the Ride
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename /home/andrea/workspace/SoftEng2/DD/Immagini/Sequence diagrams/Svg/realfinal.svg
	scale 40

\end_inset


\end_layout

\begin_layout Standard
\noindent
The first optional part concerns the money saving option.
 The list returned by the powerStationManager contains the number of free
 plugs of each power stations.
\end_layout

\begin_layout Standard
\noindent
The system is notified of this option after the unlocking of the car.
\end_layout

\begin_layout Standard
\noindent
Then the system periodically increases the client charge if he/she doesn't
 ignite the engine.
\end_layout

\begin_layout Standard
\noindent
During the ride the system periodically sends the current charge to the
 car, in order to display the amount to the user.
\end_layout

\begin_layout Standard
\noindent
Then we have different behaviours if the client parks the car in a safe
 area or not.
 If the client leaves the car outside the safe area or doesn't leave the
 car the current charge keeps increasing.
 In those cases an operator is notified.
 
\end_layout

\begin_layout Standard
\noindent
In the final part an operator is notified of a car left too far from the
 nearest power station or left with low battery
\end_layout

\begin_layout Subsubsection
Payment process
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename /home/andrea/workspace/SoftEng2/DD/Immagini/Sequence diagrams/Svg/payment.svg
	scale 50

\end_inset


\end_layout

\begin_layout Standard
This diagram shows the two situation when a payment is submitted to the
 payment handler.
 
\end_layout

\begin_layout Subsection
Component Interfaces
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename /home/andrea/workspace/SoftEng2/DD/Immagini/Interfaces.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
These interfaces provide access to the client apps and to external components.
 
\end_layout

\begin_layout Subsection
Selected architectural styles and patterns
\end_layout

\begin_layout Subsubsection
Protocols and architecture
\end_layout

\begin_layout Standard
\noindent
The application is divided into three tiers: Database, application logic
 and thin client.
\end_layout

\begin_layout Standard
\noindent
We have a relational database who communicates with the application logic
 tier through the dbms APIs.
 
\end_layout

\begin_layout Standard
\noindent
The application logic server interacts with the web server and the clients
 with RESTful api.
 This approach has several advantages: being a stateless protocol means
 that no session of the client is saved on the server, each request is independe
nt from previous requests and contains all the information to be interpreted
 correctly.
\end_layout

\begin_layout Standard
\noindent
The application server is made of stateless components: this ensures that
 multiple instances of the components could be created and they could serve
 any request in the same way in order to guarantee scalability.
\end_layout

\begin_layout Standard
\noindent
The thin client layer handles the GUI, receives notifications and can send
 requests.
 
\end_layout

\begin_layout Standard
\noindent
We also use HTTP between the web server and the clients.
\end_layout

\begin_layout Standard
\noindent
The client app comunicates with the map provider through its API.
\end_layout

\begin_layout Subsubsection
Design Patterns
\end_layout

\begin_layout Standard
The mvc pattern concerns the whole system: the model contains the internal
 representation of the world, the controllers are the handlers of the business
 logic and the views are represented by the clients applications.
 In this way any of the three conponents can be changed regardless of the
 others.
\end_layout

\begin_layout Standard
\noindent
Then also a pub/sub pattern is used: the reservation controller notifies
 all the currently logged users about reserved and released cars.
 The user subscribes to this topic when he logs in.
\end_layout

\begin_layout Section
Algorithm design
\end_layout

\begin_layout Subsection
Calculate cost:
\end_layout

\begin_layout Standard
the algorithm will start considerating the amount of money calculated by
 the carHandler, which depends only on the duration of the ride.
 Then the algorithm will apply penalties, if any :
\end_layout

\begin_layout Itemize
if a car is left at more than 3 KM from the nearest power station or with
 more than 80% of the battery empty,the algorithm charges 30% more
\end_layout

\begin_layout Standard
And then benefits will be considered:
\end_layout

\begin_layout Itemize
if the car sensor detected more than two passenger during the travel the
 algorithm applies a 10% discount
\end_layout

\begin_layout Itemize
if the car is left with more than 50% of battery, the algorithm applies
 a 20% discount
\end_layout

\begin_layout Itemize
if the car is plugged into a power grid and it's left in a safe area, the
 algorithm applies a 30% discount
\end_layout

\begin_layout Standard
where a x% discount(charge) on a value y means: y = y - y*x/100 (y = y +
 y*x/100)
\end_layout

\begin_layout Subsection
Power station for money saving option: 
\end_layout

\begin_layout Standard
The chosen power station will be the one closest to the requested destination
 with a percentage of free plugs greater or equal to the average of the
 percentage of the free plugs of all the power stations.
\end_layout

\begin_layout Section
User Interface design
\end_layout

\begin_layout Subsection
Mockups
\end_layout

\begin_layout Subsubsection
Client App
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename /home/andrea/workspace/SoftEng2/DD/Immagini/Mockup/usr4.png
	scale 25

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename /home/andrea/workspace/SoftEng2/DD/Immagini/Mockup/usr6.png
	scale 25

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename /home/andrea/workspace/SoftEng2/DD/Immagini/Mockup/usr3.png
	scale 25

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename /home/andrea/workspace/SoftEng2/DD/Immagini/Mockup/usr5.png
	scale 25

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename /home/andrea/workspace/SoftEng2/DD/Immagini/Mockup/usr1.png
	scale 25

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename /home/andrea/workspace/SoftEng2/DD/Immagini/Mockup/usr2.png
	scale 25

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename /home/andrea/workspace/SoftEng2/DD/Immagini/Mockup/usr9.png
	scale 25

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename /home/andrea/workspace/SoftEng2/DD/Immagini/Mockup/usr8.png
	scale 25

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename /home/andrea/workspace/SoftEng2/DD/Immagini/Mockup/usr7.png
	scale 25

\end_inset


\end_layout

\begin_layout Subsubsection
Client Web
\end_layout

\begin_layout Standard
The web interface offers a subset of the functionality available with the
 mobile app: money saving option and car unlocking are not supported via
 web app.
 
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename /home/andrea/workspace/SoftEng2/DD/Immagini/Mockup/pc1.png
	scale 25

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename /home/andrea/workspace/SoftEng2/DD/Immagini/Mockup/pc2.png
	scale 25

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename /home/andrea/workspace/SoftEng2/DD/Immagini/Mockup/pc3.png
	scale 25

\end_inset


\end_layout

\begin_layout Subsubsection
Operator App
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename /home/andrea/workspace/SoftEng2/DD/Immagini/Mockup/op3.png
	scale 25

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename /home/andrea/workspace/SoftEng2/DD/Immagini/Mockup/op1.png
	scale 25

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Graphics
	filename /home/andrea/workspace/SoftEng2/DD/Immagini/Mockup/op2.png
	scale 25

\end_inset


\end_layout

\begin_layout Subsection
Ux diagram
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename /home/andrea/workspace/SoftEng2/DD/Immagini/User diagrams/Ux.png
	scale 30

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename /home/andrea/workspace/SoftEng2/DD/Immagini/User diagrams/UXoperatore.png
	scale 40

\end_inset


\end_layout

\begin_layout Subsection
Bce diagram
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename /home/andrea/workspace/SoftEng2/DD/Immagini/User diagrams/Bce.png
	scale 30

\end_inset


\end_layout

\begin_layout Section
\noindent
Requirement traceability
\end_layout

\begin_layout Standard
[G1] Allow users to sign up, providing their driver license number, payment
 information and a username
\end_layout

\begin_layout Itemize
Client App
\end_layout

\begin_layout Itemize
Client Controller
\end_layout

\begin_layout Itemize
Database
\end_layout

\begin_layout Standard
[G2] Allow users to sign in 
\end_layout

\begin_layout Itemize
ClientApp
\end_layout

\begin_layout Itemize
Client Controller
\end_layout

\begin_layout Itemize
Database
\end_layout

\begin_layout Standard
[G3a] Show available cars within a certain distance from current location
\end_layout

\begin_layout Standard
\noindent
[G3b] Show available cars within a certain distance from a specified address
\end_layout

\begin_layout Itemize
ClientApp
\end_layout

\begin_layout Itemize
Map provider
\end_layout

\begin_layout Itemize
Client Controller
\end_layout

\begin_layout Itemize
Database
\end_layout

\begin_layout Standard
[G4] Let users reserve a single car
\end_layout

\begin_layout Itemize
ClientApp
\end_layout

\begin_layout Itemize
Client Controller
\end_layout

\begin_layout Itemize
Reservation Controller
\end_layout

\begin_layout Itemize
Database
\end_layout

\begin_layout Itemize
Car controller
\end_layout

\begin_layout Itemize
Car Handler
\end_layout

\begin_layout Standard
[G5] If a car is not picked up within an hour from the reservation, the
 system tags the car as available again, and the reservation expires; the
 user pays a fee of 1 EUR
\end_layout

\begin_layout Itemize
Client App
\end_layout

\begin_layout Itemize
Reservation Controller
\end_layout

\begin_layout Itemize
Car Controller
\end_layout

\begin_layout Itemize
Car Handler
\end_layout

\begin_layout Itemize
Payment Controller
\end_layout

\begin_layout Itemize
Database
\end_layout

\begin_layout Standard
[G6] A user that reaches a reserved car must be able to tell the system
 he's nearby, so the system unlocks the car and the user may enter.
 From that moment on, the user periodically pays an additional amount of
 money after a predefined time if he/she doesn't start the engine
\end_layout

\begin_layout Itemize
Client App
\end_layout

\begin_layout Itemize
Reservation Controller
\end_layout

\begin_layout Itemize
Car Controller
\end_layout

\begin_layout Itemize
Car Handler
\end_layout

\begin_layout Itemize
Database
\end_layout

\begin_layout Standard
[G7] As soon as the engine ignites, the system starts charging the user
 for a given amount of money per minute; the user is notified of the current
 charges through a screen on the car
\end_layout

\begin_layout Itemize
CarHandler
\end_layout

\begin_layout Itemize
ReservationManager
\end_layout

\begin_layout Itemize
Car Controller
\end_layout

\begin_layout Standard
[G8] The system stops charging the user as soon as the car is parked in
 a safe area and the user exits the car; at this point the system locks
 the car automatically.
 Then the system submits to the payment handler the total amount of money
 that the user has to pay
\end_layout

\begin_layout Itemize
Reservation Controller
\end_layout

\begin_layout Itemize
Car Controller
\end_layout

\begin_layout Itemize
Car Handler 
\end_layout

\begin_layout Itemize
Payment Controller
\end_layout

\begin_layout Itemize
Database
\end_layout

\begin_layout Standard
[G9] The final amount of money can be increased or decreased depending on
 the user behaviour.
 Parking too far from a power grid station or leaving a car with low battery
 will result in a penalty.
 Leaving the car with a certain amount of battery charge, taking other passenger
s onto the car or plugging the car into the power grid inside a safe zone
 will result in a benefit.
 An operator must be notified when a car is left with low battery charge
 and when a car is left ouside the safe area form more than a predefined
 time
\end_layout

\begin_layout Itemize
Reservation Controller
\end_layout

\begin_layout Itemize
Car Handler
\end_layout

\begin_layout Itemize
Car Controller
\end_layout

\begin_layout Itemize
Operator Controller
\end_layout

\begin_layout Itemize
Operator App
\end_layout

\begin_layout Standard
[G10] If the user enables the money saving option, he/she can input his/her
 final destination and the system provides information about the station
 where to leave the car to get a discount.
 This station is determined to ensure a uniform distribution of cars in
 the city and depends both on the destination of the user and on the availabilit
y of power plugs at the selected station
\end_layout

\begin_layout Itemize
Client App
\end_layout

\begin_layout Itemize
Reservation Controller
\end_layout

\begin_layout Itemize
Power station Manager
\end_layout

\begin_layout Standard
G[11] If the payment handler notifies the system about incorrect payment
 informations or about an insufficient balance, the user is prevented from
 reserving other cars.
 He can change his payment information and communicate to the system that
 he wants to pay off his debt.
 If the payment doesn't go wrong, the user can reserve cars again
\end_layout

\begin_layout Itemize
Payment Handler
\end_layout

\begin_layout Itemize
Payment Controller
\end_layout

\begin_layout Itemize
Database
\end_layout

\begin_layout Itemize
Reservation Controller
\end_layout

\begin_layout Itemize
Client Controller
\end_layout

\begin_layout Itemize
Client App
\end_layout

\begin_layout Standard
G[12] The user must be able to cancel his reservation until he starts the
 engine.
 He still has to pay a fee of 1 EUR
\end_layout

\begin_layout Itemize
Client App
\end_layout

\begin_layout Itemize
Reservation Controller
\end_layout

\begin_layout Itemize
Car Controller
\end_layout

\begin_layout Itemize
Car Handler
\end_layout

\begin_layout Itemize
Database
\end_layout

\begin_layout Itemize
Payment Controller
\end_layout

\begin_layout Standard
[G13] Every operator must be able to change any car status to unavailable.
 Then they must be able to revert the status back to available
\end_layout

\begin_layout Itemize
Operator App
\end_layout

\begin_layout Itemize
Car Controller
\end_layout

\begin_layout Itemize
Car Handler
\end_layout

\end_body
\end_document
